name: CI

on:
  push:
    branches:
      - '**'
    tags:
      - '!**'
  pull_request:
  workflow_dispatch:

jobs:
  build-libtsduck:
    runs-on: ubuntu-latest
    env:
      target: libtsduck-static
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Restore cache
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('Dockerfile') }}
          restore-keys: ${{ runner.os }}-buildx-

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          target: ${{ env.target }}
          platforms: ${{ env.platforms }}
          tags: ${{ format(env.tag, env.target) }}
          context: .
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          push: true

      - name: Update cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  test-libtsduck:
    needs: build-libtsduck
    runs-on: ubuntu-latest
    env:
      target: libtsduck-tester
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Build
        uses: docker/build-push-action@v2
        with:
          target: ${{ env.target }}
          platforms: ${{ env.platforms }}
          context: .
          build-args: libtsduck=${{ format(env.tag, 'libtsduck-static') }}
          push: false

  build-tsduck:
    needs: build-libtsduck
    runs-on: ubuntu-latest
    env:
      target: tsduck-static
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Restore cache
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('Dockerfile') }}
          restore-keys: ${{ runner.os }}-buildx-

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          target: ${{ env.target }}
          platforms: ${{ env.platforms }}
          tags: ${{ format(env.tag, env.target) }}
          context: .
          build-args: libtsduck=${{ format(env.tag, 'libtsduck-static') }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          push: true

      - name: Test
        run: |
          for platform in $(echo ${{ env.platforms }} | tr ',' ' '); do
            echo "Testing ${platform}"
            docker run --platform=${platform} --rm \
              ${{ format(env.tag, env.target) }} --version
          done

      - name: Update cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

env:
  tag: ghcr.io/${{ github.repository }}/{0}:${{ github.sha }}
  platforms: linux/amd64
